version: '3.8'
services:
  postgres:
    image: postgres:15.3-alpine
    container_name: patriot_postgres
    ports: ["${POSTGRES_PORT:-5432}:5432"]
    volumes: ["patriot_pg_data:/var/lib/postgresql/data"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-patriot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-patriot_pass}
      POSTGRES_DB: ${POSTGRES_DB:-patriot_rentals}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-patriot_user} -d ${POSTGRES_DB:-patriot_rentals}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7.0-alpine
    container_name: patriot_redis
    # Host port 6380 is mapped to container port 6379 to avoid conflicts with local Redis instances.
    ports: ["6380:6379"]
    volumes: ["patriot_redis_data:/data"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  weaviate:
    image: semitechnologies/weaviate:1.25.0
    container_name: patriot_weaviate
    ports: ["${WEAVIATE_HTTP_PORT:-8080}:8080", "${WEAVIATE_GRPC_PORT:-50051}:50051"]
    volumes: ["patriot_weaviate_data:/var/lib/weaviate"]
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none' # Explicitly none, we provide vectors
      ENABLE_MODULES: 'text2vec-huggingface,generative-openai' # Keep generative for potential future use
      #HUGGINGFACE_APIKEY: ${HUGGINGFACE_APIKEY:-} # If using rate-limited models via HF Inference API for Weaviate
      CLUSTER_HOSTNAME: 'node1'
      LOG_LEVEL: ${LOG_LEVEL:-info}
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/v1/.well-known/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  browserless:
    image: ghcr.io/browserless/chromium
    container_name: patriot_browserless
    ports: ["${BROWSERLESS_PORT:-3000}:3000"]
    environment:
      TOKEN: ${BROWSERLESS_TOKEN:-localtoken}
      CONNECTION_TIMEOUT: 600000 # 10 minutes
      MAX_CONCURRENT_SESSIONS: ${MAX_BROWSERLESS_SESSIONS:-5}
      DEFAULT_STEALTH: 'true'
      ENABLE_DEBUGGER: 'false' # Set to true for local debugging via ws endpoint
      PREBOOT_CHROME: 'true'
      MAX_QUEUE_LENGTH: 100
    restart: unless-stopped

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:v3.3.17 # Use a recent stable v3
    container_name: patriot_flaresolverr
    ports: ["${FLARESOLVERR_PORT:-8191}:8191"]
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      TZ: UTC
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8191/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  temporal:
    image: temporalio/auto-setup:1.23.1 # Use a recent stable version
    container_name: patriot_temporal
    ports: ["${TEMPORAL_GRPC_PORT:-7233}:7233"]
    environment:
      - DB=postgresql
      - DB_PORT=5432 # Internal Docker network port for Postgres
      - POSTGRES_USER=${POSTGRES_USER:-patriot_user}
      - POSTGRES_PWD=${POSTGRES_PASSWORD:-patriot_pass}
      - POSTGRES_SEEDS=postgres # Service name of Postgres container
      - POSTGRES_VISIBILITY_PWD=${POSTGRES_PASSWORD:-patriot_pass}
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - ENABLE_SQL_VISIBILITY=true
      - TEMPORAL_HISTORY_ARCHIVAL=disabled
      - TEMPORAL_VISIBILITY_ARCHIVAL=disabled
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      postgres: { condition: service_healthy }
    volumes: ["./infra/temporal/config/dynamicconfig:/etc/temporal/config/dynamicconfig"]
    restart: unless-stopped

  temporal-ui:
    image: temporalio/ui:2.37.0
    container_name: patriot_temporal_ui
    ports:
      - "${TEMPORAL_UI_PORT:-8088}:8080"
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_NAMESPACE=${TEMPORAL_NS:-default}
    depends_on:
      - temporal
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: patriot_mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    restart: unless-stopped

  python-analytics:
    build:
      context: .
      dockerfile: ./packages/analytics/Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
      - weaviate

  typescript-crawler:
    build:
      context: .
      dockerfile: ./packages/crawler/Dockerfile
    restart: unless-stopped
    init: true
    depends_on:
      - postgres
      - redis
      - weaviate
      - temporal

  typescript-etl:
    build:
      context: .
      dockerfile: ./packages/etl/Dockerfile
    restart: unless-stopped
    init: true
    depends_on:
      - postgres
      - weaviate
      - temporal

  typescript-report:
    build:
      context: .
      dockerfile: ./packages/report/Dockerfile
    restart: unless-stopped
    init: true
    depends_on:
      - postgres

  typescript-scraper:
    build:
      context: .
      dockerfile: ./packages/scraper/Dockerfile
    restart: unless-stopped
    init: true
    depends_on:
      - redis
      - weaviate
      - temporal
    ports:
      - "3001:3000"

  torproxy:
    image: dperson/torproxy
    container_name: patriot_torproxy
    ports:
      - "9050:9050" # Expose SOCKS5 proxy on host
    environment:
      - TZ=UTC
    restart: unless-stopped

  proxy-manager:
    image: lumjj/proxy-manager:latest # lightweight Bright Data Proxy Manager fork
    container_name: patriot_brightdata_proxy
    ports:
      - "24000:24000"   # Bright Data proxy manager web UI
      - "24001:24001"   # main SOCKS/HTTP gateway port
    environment:
      - LPM_USER=${BRIGHTDATA_USER:-}
      - LPM_PASSWORD=${BRIGHTDATA_PASS:-}
    restart: unless-stopped
    networks:
      - default

volumes:
  patriot_pg_data:
  patriot_redis_data:
  patriot_weaviate_data: 