version: '3.8'
services:
  postgres:
    image: postgres:15.3-alpine
    container_name: patriot_postgres
    ports: ["${POSTGRES_PORT:-5432}:5432"]
    volumes: ["patriot_pg_data:/var/lib/postgresql/data"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-patriot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-patriot_pass}
      POSTGRES_DB: ${POSTGRES_DB:-patriot_rentals}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-patriot_user} -d ${POSTGRES_DB:-patriot_rentals}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7.0-alpine
    container_name: patriot_redis
    ports: ["${REDIS_PORT:-6379}:6379"]
    volumes: ["patriot_redis_data:/data"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  weaviate:
    image: semitechnologies/weaviate:1.25.0
    container_name: patriot_weaviate
    ports: ["${WEAVIATE_HTTP_PORT:-8080}:8080", "${WEAVIATE_GRPC_PORT:-50051}:50051"]
    volumes: ["patriot_weaviate_data:/var/lib/weaviate"]
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none' # Explicitly none, we provide vectors
      ENABLE_MODULES: 'text2vec-huggingface,generative-openai' # Keep generative for potential future use
      #HUGGINGFACE_APIKEY: ${HUGGINGFACE_APIKEY:-} # If using rate-limited models via HF Inference API for Weaviate
      CLUSTER_HOSTNAME: 'node1'
      LOG_LEVEL: ${LOG_LEVEL:-info}
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/v1/.well-known/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  browserless:
    image: browserless/playwright:1.45.0-playwright-1.45.0 # Fixed version
    container_name: patriot_browserless
    ports: ["${BROWSERLESS_PORT:-3000}:3000"]
    environment:
      TOKEN: ${BROWSERLESS_TOKEN:-localtoken}
      CONNECTION_TIMEOUT: 600000 # 10 minutes
      MAX_CONCURRENT_SESSIONS: ${MAX_BROWSERLESS_SESSIONS:-5}
      DEFAULT_STEALTH: 'true'
      ENABLE_DEBUGGER: 'false' # Set to true for local debugging via ws endpoint
      PREBOOT_CHROME: 'true'
      MAX_QUEUE_LENGTH: 100
    restart: unless-stopped

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:v3.3.17 # Use a recent stable v3
    container_name: patriot_flaresolverr
    ports: ["${FLARESOLVERR_PORT:-8191}:8191"]
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      TZ: UTC
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8191/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  temporal:
    image: temporalio/auto-setup:1.23.1 # Use a recent stable version
    container_name: patriot_temporal
    ports: ["${TEMPORAL_GRPC_PORT:-7233}:7233"]
    environment:
      - DB=postgresql
      - DB_PORT=5432 # Internal Docker network port for Postgres
      - POSTGRES_USER=${POSTGRES_USER:-patriot_user}
      - POSTGRES_PWD=${POSTGRES_PASSWORD:-patriot_pass}
      - POSTGRES_SEEDS=postgres # Service name of Postgres container
      - POSTGRES_VISIBILITY_PWD=${POSTGRES_PASSWORD:-patriot_pass}
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - ENABLE_SQL_VISIBILITY=true
      - TEMPORAL_HISTORY_ARCHIVAL=disabled
      - TEMPORAL_VISIBILITY_ARCHIVAL=disabled
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      postgres: { condition: service_healthy }
    volumes: ["./infra/temporal/config:/etc/temporal/config"]
    restart: unless-stopped

volumes:
  patriot_pg_data:
  patriot_redis_data:
  patriot_weaviate_data: 