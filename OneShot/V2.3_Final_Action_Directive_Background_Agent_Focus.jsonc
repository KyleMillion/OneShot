{
    "directiveVersion": "V2.3_Final_Action_Directive_Background_Agent_Focus",
    "directiveTitle": "ACTION DIRECTIVE FOR CURSOR.AI AGENT: AI-ASSISTED POPULATION OF EXISTING SCRAPER CONFIGURATIONS (Leveraging Initial Data & Explicit Background Agent Tasking)",
    "targetAgentPersona": "Cursor.AI Agent with Background Agent capabilities (as per self-assessment V2, considering features up to Changelog v0.50 or later). You are to prioritize using your most autonomous capabilities for web investigation.",
    "contextAndCurrentState": {
      "project": "Patriot Equipment Rentals â€“ Competitor Price-Gap Tool",
      "status": "Project code and structure have been generated. Core files exist.",
      "keyFilesRequiringAttention": {
        "vendorConfigs": {
          "location": "packages/scraper/src/configs/",
          "description": "Files like `sunbelt.config.ts`, `patriot.config.ts`, etc., exist but contain placeholder values for `productUrlDetectRegex` and CSS `selectors`. These files should ideally also contain embedded directive comments derived from `/INITIAL_VENDOR_TARGET_DATA.md` from the initial project generation's Phase 0.",
          "currentContentSourceGuidance": "These files should ideally already contain embedded directive comments derived from `/INITIAL_VENDOR_TARGET_DATA.md` from the initial project generation's Phase 0."
        },
        "initialVendorDataFile": {
          "path": "/INITIAL_VENDOR_TARGET_DATA.md",
          "description": "Located in the project root. Contains foundational research, conceptual guidance for selectors, initial regex guesses, and other vendor-specific blueprint data. This is a primary input for your task. You MUST read and use this file as the basis for each vendor's initial data."
        }
      },
      "agentSelfAssessmentReference": "Your capabilities as outlined in your 'Self-Analysis V2 - Post-Changelog v0.50 Review' are assumed, particularly regarding Background Agent functionality for web investigation and headless browser operation. This directive explicitly instructs you to attempt using these advanced capabilities."
    },
    "objectiveForAgent": "For each specified vendor: 1) Load its blueprint from `/INITIAL_VENDOR_TARGET_DATA.md`. 2) **Structure and prepare a task suitable for a Background Agent** to autonomously investigate its live website to derive refined `productUrlDetectRegex` and CSS `selectors`, prioritizing direct execution of headless browsers and MCPs. 3) Based on the output from the Background Agent's investigation, update the existing `packages/scraper/src/configs/[vendorId].config.ts` file. 4) Create a comprehensive `AI_CONFIG_INVESTIGATION_REPORT.md`.",
    "instructionsForAIAssistedConfiguration": {
      "executionEnvironment": "The web investigation portion (Step 2) is intended to be executed by a **Background Agent**. You, the main interactive agent, will define this task for the Background Agent and then integrate its results.",
      "iterationInstructions": "Process EACH VENDOR ID specified in the `.env` variable `VENDOR_IDS_TO_PROCESS` (e.g., 'sunbelt', 'unitedrentals', 'patriot', etc.), OR for a specific list of vendor IDs provided if this directive is triggered with an override.",
      "perVendorProcessingSteps": [
        {
          "step": 1,
          "title": "Load Vendor Blueprint & Existing Configuration File (Main Agent Task)",
          "actions": [
            "Read and parse the `/INITIAL_VENDOR_TARGET_DATA.md` file. Locate the data blueprint section corresponding to the current `[vendorId]` being processed. Extract all relevant fields: `id`, `displayName`, `baseUrl`, initial `startUrls`, `productUrlDetectRegex` (including its pattern and rationaleForHumanReview), `selectorsConceptualGuidance`, `useFlaresolverr` flags, `defaultPlaywrightContextOptions` guidance, `rateParsingConfig` guidance, and any `notes` or `operatorActionItems`.",
            "Read the existing `packages/scraper/src/configs/[vendorId].config.ts` file. Note its current placeholder structure and any embedded directive comments (which should align with the blueprint)."
          ],
          "currentVendorContext": "Current Vendor: `[vendorId]`, Target Config File: `packages/scraper/src/configs/[vendorId].config.ts`"
        },
        {
          "step": 2,
          "title": "Define and Prepare for Background Agent Investigation: Reconnaissance & Product Detail Page (PDP) Discovery",
          "actions": [
            {
              "subStep": "2.a",
              "title": "Task Definition for Background Agent (Main Agent Prepares This)",
              "instruction": "Agent, based on the blueprint for `[vendorId]` (from Step 1), define the precise task and necessary inputs for a Background Agent. This Background Agent task will be to autonomously fetch full, JS-rendered HTML content from the vendor's site. The task definition should include:",
              "taskComponentsForBackgroundAgent": [
                {
                  "id": "BG_TASK_INPUT_VendorId",
                  "detail": "The `id` for `[vendorId]` (e.g., 'sunbelt')."
                },
                {
                  "id": "BG_TASK_INPUT_BaseUrl",
                  "detail": "The `baseUrl` for `[vendorId]`."
                },
                {
                  "id": "BG_TASK_INPUT_StartUrls",
                  "detail": "The `startUrls` for `[vendorId]`."
                },
                {
                  "id": "BG_TASK_INSTRUCTION_Objective",
                  "detail": "Objective: Autonomously navigate from start URLs for `[vendorId]`, identify 3-5 diverse Product Detail Pages (PDPs), and fetch their full, JS-rendered HTML content."
                },
                {
                  "id": "BG_TASK_INSTRUCTION_Tools_Primary",
                  "detail": "Primary Method: Utilize your native headless browser capabilities within your sandboxed remote environment (e.g., Playwright, potentially using the project's Browserless endpoint: `ws://localhost:${BROWSERLESS_PORT:-3000}?token=${BROWSERLESS_TOKEN:-localtoken}` if applicable and configurable for your environment, or using your own sandboxed browser tools). If a web scraping MCP (e.g., Bright Data-like capabilities) is active and available to you, prioritize its use for robust fetching."
                },
                {
                  "id": "BG_TASK_INSTRUCTION_Output",
                  "detail": "Expected Output: A JSON object or structured data containing: `vendorId`, a list of `pdpUrls` successfully fetched, and for each `pdpUrl`, its complete `htmlContent` (or an accessible path if stored by the Background Agent, e.g., `temp_html/[vendorId]/[pdp_filename].html`)."
                },
                {
                  "id": "BG_TASK_INSTRUCTION_Reporting",
                  "detail": "Report back on overall success for `[vendorId]`, the list of fetched PDP URLs, how HTML was acquired (native BG agent browsing, MCP, or if it had to note failure for direct fetching), and any significant issues encountered during fetching."
                }
              ],
              "mainAgentAction": "**Present this defined task clearly (e.g., as a structured JSON object or well-formatted text block). Conceptually, this task would then be 'Sent to a Background Agent' by the operator using the appropriate Cursor.ai UI mechanism. Await the conceptual results (structured data with PDP URLs and their HTML content/paths) from this Background Agent task before proceeding with subsequent steps for this vendor.**"
            },
            {
              "subStep": "2.b",
              "title": "Process Background Agent Output (Main Agent Task)",
              "instruction": "Once the Background Agent conceptually completes its HTML fetching task for `[vendorId]` and provides its structured output (containing `vendorId`, `pdpUrls`, and `htmlContent` or paths for each):",
              "subActions": [
                {
                  "id": "2.b.i",
                  "action": "Log the PDP URLs that the Background Agent successfully investigated for `[vendorId]`.",
                  "expectedOutcome": "List of investigated PDP URLs available for next steps."
                },
                {
                  "id": "2.b.ii",
                  "action": "Make the HTML content of these PDPs available for your analysis in subsequent steps (either directly if provided as text within the structured output, or by preparing to read from the conceptual paths if the Background Agent saved them to a shared/accessible location).",
                  "expectedOutcome": "HTML content ready for analysis."
                },
                {
                  "id": "2.b.iii",
                  "action": "Record the method reported by the Background Agent for HTML acquisition (e.g., 'Direct Playwright via remote environment', 'Used Web Scraping MCP', 'Fell back to operator script execution request') for inclusion in the final `AI_CONFIG_INVESTIGATION_REPORT.md`.",
                  "expectedOutcome": "Method of HTML acquisition noted."
                }
              ]
            }
          ]
        },
        {
          "step": 3,
          "title": "URL Pattern (`productUrlDetectRegex`) Derivation (Main Agent Task, using Background Agent's output)",
          "actions": [
            "Analyze the URLs of the product detail pages **provided in the Background Agent's output from Step 2.b** for the current `[vendorId]`.",
            "Compare these observed URL structures with the initial `productUrlDetectRegex.pattern` and its associated `productUrlDetectRegex.rationaleForHumanReview` from the vendor blueprint (Step 1.a).",
            "Propose a refined `productUrlDetectRegex` string, suitable for the `VendorConfig` type, that accurately identifies PDPs for this vendor. If the blueprint's regex seems robust and accurate after your analysis of the live URLs, you may retain it (note this decision) or suggest minor improvements for precision or clarity.",
            "In your final report (Step 6), clearly state your proposed `productUrlDetectRegex`, your confidence level (High/Medium/Low), and a concise rationale for your final proposal (e.g., 'Refined blueprint regex to include optional trailing slash based on observed PDP URLs from Background Agent investigation')."
          ]
        },
        {
          "step": 4,
          "title": "CSS Selector Suggestion & Iterative Refinement (Main Agent Task, using Background Agent's output)",
          "actions": [
            "For each target data field (`productName`, `priceDay`, `priceWeek`, `priceMonth`, `sku`, `description`, `imageUrl`, `category`) as defined in the `VendorConfig` interface:",
            "  a. Refer to the `selectorsConceptualGuidance` from the vendor blueprint (Step 1.a) to understand the likely nature and location of the target data.",
            "  b. Analyze the **HTML content of the sample PDPs provided in the Background Agent's output from Step 2.b** for the current `[vendorId]`.",
            "  c. Propose an initial CSS selector for the current data field. Prioritize robust options: `id` attributes, unique `data-*` attributes (especially `data-testid`), stable and semantic class names. Avoid overly positional or generic selectors if possible.",
            "  d. **If the Background Agent was capable of iterative testing and reported refined selectors, prioritize those.** Otherwise, based on your analysis of the provided static HTMLs, assess the likely robustness of your proposed selector. If you can identify patterns across the multiple HTML samples, use that to inform your choice. (True iterative testing by the *main interactive agent* against static HTMLs is less effective than what a Background Agent could do with live testing, but analyze the provided samples for consistency).",
            "  e. For each data field, document your final proposed CSS selector, your confidence level (High/Medium/Low), and the primary basis for your selection (e.g., 'Matched `data-testid=\"product-name\"` on 4/5 sampled PDPs provided by Background Agent', 'Common class pattern `.price--daily .amount` observed across all samples'). Record this for the final report (Step 6)."
          ]
        },
        {
          "step": 5,
          "title": "Update Existing Configuration File (`packages/scraper/src/configs/[vendorId].config.ts`) (Main Agent Task)",
          "actions": [
            "Access and **modify the existing `packages/scraper/src/configs/[vendorId].config.ts`** file.",
            "Ensure the following fields are correctly populated based on the **vendor blueprint information from Step 1.a**: `id`, `displayName`, `baseUrl`, `startUrls` (use refined list from Background Agent's PDP discovery if it successfully navigated from sitemaps or broadened the initial list, otherwise use blueprint's and note any operator actions from blueprint), `useFlaresolverr`, and `notes`. Add any `operatorActionItems` from the blueprint as a comment within the `notes` field or near the relevant field (e.g., `// OPERATOR_ACTION: Verify this sitemap URL`).",
            "Update the `productUrlDetectRegex` value with your AI-proposed regex from Step 3.c. Add a specific comment next to it: `// AI-PROPOSED REGEX (Confidence: [YourConfidenceLevel] - Rationale: [YourConciseRationale]) - OPERATOR MUST VERIFY` (If you retained the blueprint's regex and it was confirmed robust by BG Agent's URL samples, note that: `// BLUEPRINT REGEX CONFIRMED (Confidence: High via BG Agent samples) - OPERATOR TO VERIFY`).",
            "Populate the `selectors` object with your refined and (ideally Background Agent) iteratively tested CSS selector proposals from Step 4.e. For each selector, add a specific comment: `// AI-PROPOSED SELECTOR (Confidence: [YourConfidenceLevel], Basis: [YourBasisForSelection]) - OPERATOR MUST VERIFY`.",
            "Ensure `playwrightContextOptions` and `rateParsingConfig` objects are present in the configuration. Populate them using any defaults specified in the vendor blueprint or, if none, use standard project defaults (e.g., for `playwrightContextOptions`: `{ userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36', viewport: { width: 1920, height: 1080 } }`; for `rateParsingConfig`: `{ currencySymbol: '$', decimalSeparator: '.', thousandSeparator: ',' }`).",
            "Preserve the overall TypeScript structure of the file, ensuring it remains valid and strictly adheres to the `VendorConfig` type from `@patriot-rentals/shared-types`. The original embedded directive comment block (from Phase 0 of project generation, sourced from the blueprint) should remain at the top of the file for operator reference."
          ]
        },
        {
          "step": 6,
          "title": "Log Findings for Operator Review (Main Agent Task)",
          "actions": [
            "Create (if it doesn't exist) or append to a single Markdown file named `AI_CONFIG_INVESTIGATION_REPORT.md` in the project root.",
            "For the current `[vendorId]`, add a new, clearly demarcated section containing:",
            "  - **Vendor:** `[displayName]` (`[id]`)",
            "  - **Base URL:** `[baseUrl]`",
            "  - **Date of Investigation:** Current timestamp (ISO 8601).",
            "  - **HTML Acquisition Method (Reported by Background Agent):** State clearly how the Background Agent acquired HTML (e.g., 'Direct Playwright via remote environment', 'Used Web Scraping MCP', 'BG Agent indicated failure for direct fetch, operator would need to use fallback').",
            "  - **Sampled Product Detail Page URLs (from Background Agent):** List the exact URLs of the PDPs fetched and analyzed.",
            "  - **Proposed `productUrlDetectRegex`:**",
            "    - Regex: `` `[YourProposedRegex]` ``",
            "    - Confidence: `[High/Medium/Low]`",
            "    - Rationale/Notes: `[YourRationale, and if/how it differs from the blueprint's initial guess]`",
            "  - **Proposed CSS Selectors:** (For each target field like `productName`, `priceDay`, etc.)",
            "    - Field: `productName`",
            "    - Selector: `` `[YourProposedSelectorForProductName]` ``",
            "    - Confidence: `[High/Medium/Low]`",
            "    - Basis/Notes: `[YourBasisForSelection, e.g., 'Matched data-testid on X/Y pages', 'Common class pattern .xyz observed across BG Agent samples']`",
            "    - ... (repeat for all selector fields)",
            "  - **Outstanding Operator Action Items (from blueprint):** List any `operatorActionItems` noted in the blueprint for this vendor that still require attention (e.g., 'Verify sitemap URL for United Rentals', 'Define start URLs for Patriot based on live site').",
            "  - **Significant Challenges or Assumptions (from Main or Background Agent):** Document any difficulties encountered."
          ]
        }
      ],
      "finalOutput": [
        "Updated `packages/scraper/src/configs/[vendorId].config.ts` files for each processed vendor, containing AI-proposed values for `productUrlDetectRegex` and `selectors`, clearly commented for operator review, and preserving/integrating blueprint data.",
        "A comprehensive `AI_CONFIG_INVESTIGATION_REPORT.md` file in the project root, detailing the investigation process, findings, confidence levels, HTML acquisition method used, and any challenges for each vendor."
      ],
      "postTaskExpectationForOperator": [
        "The operator will use your AI-generated proposals and the `AI_CONFIG_INVESTIGATION_REPORT.md` as a significantly advanced and informed starting point.",
        "The operator MUST thoroughly review and test each AI-proposed `productUrlDetectRegex` and CSS selector using browser developer tools and the project's testing script: `pnpm test:e2e:scrape-url --vendorId [vendorId] --url [pdpUrl]` (or the equivalent `pnpm --filter @patriot-rentals/scraper test:e2e:scrape-url ...` if run from root).",
        "The operator will make necessary corrections, refinements, and final decisions on all configurations to ensure accuracy and robustness before relying on them for production scraping."
      ]
    }
  }